// method overrising =  delcaring a method in sub class,
//                      which is already present in parent class.
//                      done so that a child class can give its own implementations 

//I have two class Dog and Animal
---------------------------------
public class Dog extends Animal{
    
}
----------------------------------
public class Animal {
    void speak() {System.out.println("The animal speaks");}
}
//The dog shall inherit everything animal has
-----------------------------------
//Then I have the main class
public class Main {
    public static void main(String[] args) {
        
        Dog dog = new Dog();
        dog.speak;
        
    }
}
//output: The animal speaks 
//****************************************************
//If we were to copy line 12 from animal into Dog class then we are overriding it
public class Dog extends Animal{
    void speak() {System.out.println("The animal speaks");}
}

/---------------------------------------
//we can also change line 29 into "The dog goes *bark*"
public class Dog extends Animal{
    void speak() {System.out.println("The dog goes *bark*");}
}
//output: The dog goes *bark*
//****************************************
//But we should add @Override annotation on it like this:
//It is good practise, it doesn't add anymore functionality 
public class Dog extends Animal{
    @Override
    void speak() {System.out.println("The dog goes *bark*");}
}
----------------------------------
public class Animal {
    void speak() {System.out.println("The animal speaks");}
}
//The dog shall inherit everything animal has
//--------------------------------

public class Main {
    public static void main(String[] args) {
        
        Dog dog = new Dog();
        dog.speak;
        
        Animal animal = new Animal();
        animal.speak();
    }
}
//Output: The dog goes bark
//        The animal speaks






